@page "/"
<link href="~/css/chat.css" rel="stylesheet" />
<h1>Blazor SignalR Chat Sample</h1>

<p>
    This application demonstrates the use of <a href="https://www.asp.net/signalr">SignalR</a>
    to create a <a href="https://blazor.net/">Blazor</a> chat application.
</p>

<p>
    At the present time, Blazor (version 0.4) cannot use the .NET Core SignalR client library
    (<a href="https://github.com/aspnet/Blazor/issues/20">see issue #20</a>), so this application
    uses the <a href="https://blazor.net/docs/javascript-interop.html">Blazor Javascript interop library</a>
    to talk to the SignalR Javascript client.
</p>
<hr />
@if (!chatting)
{
    <h2>Chat</h2>

    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" bind="@username" />
    <button type="button" onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    @if (message != null)
    {
        <div class="invalid-feedback">@message</div>
        <small id="emailHelp" class="form-text text-muted">@message</small>
    }

}
@if (chatting)
{
    <p>You are connected as <b>@username</b></p>
    <button class="btn btn-sm btn-warning pull-right" onclick="@Disconnect">Disconnect</button>
    <div id="scrollbox">

        @foreach (var item in messages)
        {
            <div class="@item.CSS">
                <div class="user">@item.Name</div>
                <div class="msg">@item.Body</div>
            </div>
        }

        <textarea class="input-lg" placeholder="enter your comment" bind="@newMessage" onkeypress="@KeyPressed"></textarea>
            
    </div>


}



@functions  {
    // mode: true if chat has been enabled

    bool chatting = false;

    // name of the user who will be chatting
    string username;
    // on-screen message
    string message;

    // new message input
    string newMessage;

    // list of messages in chat
    List<Message> messages = new List<Message>();

    void Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(username))
        {
            message = "Please enter a name";
            return;
        };

        message = "Looks okay, " + username;
        messages.Clear();
        messages.Add(new Message(username, $"{username} has joined", true));
        messages.Add(new Message("stranger", $"Welcome to Blazor, {username}!", false));
        messages.Add(new Message(username, "Good to be here!", true));
        chatting = true;
    }


    void Disconnect()
    {
        message = "chat ended";
        chatting = false;
    }


    void KeyPressed(UIKeyboardEventArgs e)
    {
        if(e.Code == "Enter" && !string.IsNullOrWhiteSpace(newMessage))
        {
            // create dummy entry
            var msg = new Message(username, newMessage.Trim(), true);
            messages.Add(msg);
            newMessage = "";
        }
    }

    class Message
    {
        public Message(string user, string body, bool mine)
        {
            Name = user;
            Body = body;
            Mine = mine;
        }

        public string Name { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }

    }
}